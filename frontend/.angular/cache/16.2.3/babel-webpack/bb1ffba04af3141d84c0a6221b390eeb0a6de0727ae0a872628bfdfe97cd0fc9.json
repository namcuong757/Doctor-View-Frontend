{"ast":null,"code":"var _class;\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./calendar.service\";\nexport class AccountService {\n  constructor(httpClient, calendarService) {\n    this.httpClient = httpClient;\n    this.calendarService = calendarService;\n    this.baseURL = \"http://localhost:8080/api/v1/accounts/\";\n  }\n  login(email, password) {\n    this.calendarService.setStatus('yes');\n    console.log(this.calendarService.getStatus());\n    const info = {\n      email: email,\n      password: password\n    };\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post(this.baseURL + 'login', params);\n  }\n  updateEmail(id, email) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      emailId: email\n    };\n    return this.httpClient.put(this.baseURL + id, JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  updatePhone(id, phone) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      phone: phone\n    };\n    return this.httpClient.put('/update', JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  updateDetails(id, details) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      details: details\n    };\n    return this.httpClient.put(this.baseURL + id, JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  resetPassword(id, password) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      password: password\n    };\n    return this.httpClient.put('/update', JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  getDoctors() {\n    return this.httpClient.get(`${this.baseURL}` + 'doctors');\n  }\n  getAccountByName(name) {\n    return this.httpClient.get(`${this.baseURL}` + 'name/' + `${name}`);\n  }\n}\n_class = AccountService;\n_class.ɵfac = function AccountService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CalendarService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","HttpParams","AccountService","constructor","httpClient","calendarService","baseURL","login","email","password","setStatus","console","log","getStatus","info","params","fromObject","post","updateEmail","id","httpHeaders","set","emailId","put","JSON","stringify","headers","updatePhone","phone","updateDetails","details","resetPassword","getDoctors","get","getAccountByName","name","i0","ɵɵinject","i1","HttpClient","i2","CalendarService","factory","ɵfac","providedIn"],"sources":["/Users/namcuong757/eclipse-workspace/HeathCare1/Doctor-View-Frontend/frontend/src/app/service/account-service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport { Account } from \"../model/account\";\nimport { CalendarService } from \"./calendar.service\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService\n{\n\n  private baseURL = \"http://localhost:8080/api/v1/accounts/\";\n\n  constructor(private httpClient:HttpClient, private calendarService:CalendarService)\n  { }\n\n  login(email:string, password:string):Observable<Account>\n  {\n    this.calendarService.setStatus('yes');\n    console.log(this.calendarService.getStatus());\n    const info = {\n      email: email,\n      password: password\n    }\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post<Account>(this.baseURL +'login', params);\n  }\n\n  updateEmail(id:number, email:string):Observable<Account>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      emailId: email\n    }\n    return this.httpClient.put<Account>(this.baseURL + id, JSON.stringify(info), {headers: httpHeaders });\n  }\n  updatePhone(id:number, phone:string):Observable<Account>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      phone: phone\n    }\n    return this.httpClient.put<Account>('/update', JSON.stringify(info), {headers: httpHeaders });\n  }\n  updateDetails(id:number, details:string):Observable<Account>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      details: details\n    }\n    return this.httpClient.put<Account>( this.baseURL + id, JSON.stringify(info), {headers: httpHeaders });\n  }\n  resetPassword(id:number, password:string):Observable<Account>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      password: password\n    }\n    return this.httpClient.put<Account>( '/update', JSON.stringify(info), {headers: httpHeaders });\n  }\n  getDoctors():Observable<Account[]>\n  {\n    return this.httpClient.get<Account[]>(`${this.baseURL}` + 'doctors');\n  }\n  getAccountByName(name : string):Observable<Account>\n  {\n    return this.httpClient.get<Account>(`${this.baseURL}` + 'name/' +`${name}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}