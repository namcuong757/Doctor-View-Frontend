{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpParams } from \"@angular/common/http\";\nlet AccountService = class AccountService {\n  constructor(httpClient, calendarService) {\n    this.httpClient = httpClient;\n    this.calendarService = calendarService;\n    this.baseURL = \"http://localhost:8080/api/v1/accounts/\";\n  }\n  login(email, password) {\n    this.calendarService.setStatus('yes');\n    console.log(this.calendarService.getStatus());\n    const info = {\n      email: email,\n      password: password\n    };\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post(this.baseURL + 'login', params);\n  }\n  updatePhone(id, phone) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      phone: phone\n    };\n    return this.httpClient.put('/update', JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  resetPassword(id, password) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      password: password\n    };\n    return this.httpClient.put('/update', JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  getDoctors() {\n    return this.httpClient.get(`${this.baseURL}` + 'doctors');\n  }\n  getAccountByName(name) {\n    return this.httpClient.get(`${this.baseURL}/${name}`);\n  }\n};\nAccountService = __decorate([Injectable({\n  providedIn: 'root'\n})], AccountService);\nexport { AccountService };","map":{"version":3,"names":["Injectable","HttpHeaders","HttpParams","AccountService","constructor","httpClient","calendarService","baseURL","login","email","password","setStatus","console","log","getStatus","info","params","fromObject","post","updatePhone","id","phone","httpHeaders","set","put","JSON","stringify","headers","resetPassword","getDoctors","get","getAccountByName","name","__decorate","providedIn"],"sources":["/Users/namcuong757/eclipse-workspace/HeathCare1/Doctor-View-Frontend/frontend/src/app/service/account-service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {observable, Observable} from \"rxjs\";\nimport { Account } from \"../model/account\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService\n{\n\n  private baseURL = \"http://localhost:8080/api/v1/accounts/\";\n\n  constructor(private httpClient:HttpClient, private calendarService:Ca)\n  { }\n\n  login(email:string, password:string):Observable<Account>\n  {\n    this.calendarService.setStatus('yes');\n    console.log(this.calendarService.getStatus());\n    const info = {\n      email: email,\n      password: password\n    }\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post<Account>(this.baseURL +'login', params);\n  }\n\n\n  updatePhone(id:number, phone:string):Observable<Account>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      phone: phone\n    }\n    return this.httpClient.put<Account>('/update', JSON.stringify(info), {headers: httpHeaders });\n  }\n\n  resetPassword(id:number, password:string):Observable<Account>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      password: password\n    }\n    return this.httpClient.put<Account>( '/update', JSON.stringify(info), {headers: httpHeaders });\n  }\n  getDoctors():Observable<Account[]>\n  {\n    return this.httpClient.get<Account[]>(`${this.baseURL}` + 'doctors');\n  }\n  getAccountByName(name : string):Observable<Account>\n  {\n    return this.httpClient.get<Account>(`${this.baseURL}/${name}`);\n  }\n}\n"],"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AACxC,SAAoBC,WAAW,EAAEC,UAAU,QAAO,sBAAsB;AAQjE,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YAAoBC,UAAqB,EAAUC,eAAkB;IAAjD,KAAAD,UAAU,GAAVA,UAAU;IAAqB,KAAAC,eAAe,GAAfA,eAAe;IAF1D,KAAAC,OAAO,GAAG,wCAAwC;EAGxD;EAEFC,KAAKA,CAACC,KAAY,EAAEC,QAAe;IAEjC,IAAI,CAACJ,eAAe,CAACK,SAAS,CAAC,KAAK,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,eAAe,CAACQ,SAAS,EAAE,CAAC;IAC7C,MAAMC,IAAI,GAAG;MACXN,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;KACX;IACD,MAAMM,MAAM,GAAG,IAAId,UAAU,CAAC;MAC5Be,UAAU,EAAEF;KACb,CAAC;IACF,OAAO,IAAI,CAACV,UAAU,CAACa,IAAI,CAAU,IAAI,CAACX,OAAO,GAAE,OAAO,EAAES,MAAM,CAAC;EACrE;EAGAG,WAAWA,CAACC,EAAS,EAAEC,KAAY;IAEjC,MAAMC,WAAW,GAAG,IAAIrB,WAAW,EAAE,CAACsB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GAAG;MACXK,EAAE,EAAEA,EAAE;MACNC,KAAK,EAAEA;KACR;IACD,OAAO,IAAI,CAAChB,UAAU,CAACmB,GAAG,CAAU,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL;IAAW,CAAE,CAAC;EAC/F;EAEAM,aAAaA,CAACR,EAAS,EAAEV,QAAe;IAEtC,MAAMY,WAAW,GAAG,IAAIrB,WAAW,EAAE,CAACsB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GAAG;MACXK,EAAE,EAAEA,EAAE;MACNV,QAAQ,EAAEA;KACX;IACD,OAAO,IAAI,CAACL,UAAU,CAACmB,GAAG,CAAW,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL;IAAW,CAAE,CAAC;EAChG;EACAO,UAAUA,CAAA;IAER,OAAO,IAAI,CAACxB,UAAU,CAACyB,GAAG,CAAY,GAAG,IAAI,CAACvB,OAAO,EAAE,GAAG,SAAS,CAAC;EACtE;EACAwB,gBAAgBA,CAACC,IAAa;IAE5B,OAAO,IAAI,CAAC3B,UAAU,CAACyB,GAAG,CAAU,GAAG,IAAI,CAACvB,OAAO,IAAIyB,IAAI,EAAE,CAAC;EAChE;CACD;AAlDY7B,cAAc,GAAA8B,UAAA,EAH1BjC,UAAU,CAAC;EACVkC,UAAU,EAAE;CACb,CAAC,C,EACW/B,cAAc,CAkD1B;SAlDYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}